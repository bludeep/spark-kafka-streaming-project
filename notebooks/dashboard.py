import streamlit as st
import pandas as pd
import plotly.express as px
from sqlalchemy import create_engine
from datetime import datetime
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Real Estate Dashboard", page_icon="üè†", layout="wide")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üè† Real Estate Analytics")
st.markdown("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏")

@st.cache_resource
def get_database_connection():
    try:
        return create_engine('postgresql://spark_user:spark_password@postgresql:5432/realestate')
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

def load_data(_engine):
    try:
        query = """
        SELECT district, property_type, avg_price, total_ads, avg_price_per_sqm
        FROM real_estate_analytics
        ORDER BY district
        """
        return pd.read_sql(query, _engine)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return pd.DataFrame()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
engine = get_database_connection()
if engine is None:
    st.stop()

df = load_data(engine)
if df.empty:
    st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ó–∞–ø—É—Å—Ç–∏—Ç–µ kafka-producer.ipynb.")
    st.stop()

# –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
st.markdown("---")
col1, col2 = st.columns(2)
with col1:
    st.metric("üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ", datetime.now().strftime("%H:%M:%S"))
with col2:
    st.metric("üìä –ó–∞–ø–∏—Å–µ–π", len(df))

# –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–π–æ–Ω—É
st.sidebar.header("–§–∏–ª—å—Ç—Ä")
districts = ['–í—Å–µ'] + sorted(df['district'].unique().tolist())
selected_district = st.sidebar.selectbox("–†–∞–π–æ–Ω", districts)

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
filtered_df = df if selected_district == '–í—Å–µ' else df[df['district'] == selected_district]

# –ú–µ—Ç—Ä–∏–∫–∏
st.markdown("---")
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("–†–∞–π–æ–Ω–æ–≤", df['district'].nunique())
with col2:
    st.metric("–û–±—ä—è–≤–ª–µ–Ω–∏–π", f"{filtered_df['total_ads'].sum():,}")
with col3:
    st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{filtered_df['avg_price'].mean():,.0f} ‚Ç¨" if not filtered_df['avg_price'].isna().all() else "N/A")

# –ì—Ä–∞—Ñ–∏–∫–∏
st.markdown("---")
st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

# –¢–æ–ø-5 —Ä–∞–π–æ–Ω–æ–≤ –ø–æ —Ü–µ–Ω–µ
top_districts = filtered_df.groupby('district')['avg_price'].mean().sort_values(ascending=False).head(5)
fig1 = px.bar(x=top_districts.values, y=top_districts.index, orientation='h',
              title="–¢–æ–ø-5 —Ä–∞–π–æ–Ω–æ–≤ –ø–æ —Ü–µ–Ω–µ", labels={'x': '–¶–µ–Ω–∞ (‚Ç¨)', 'y': '–†–∞–π–æ–Ω'})
st.plotly_chart(fig1, width='stretch')

# –û–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
type_counts = filtered_df.groupby('property_type')['total_ads'].sum().sort_values(ascending=False)
if not type_counts.empty:
    fig2 = px.pie(
        values=type_counts.values,
        names=type_counts.index,
        title="–û–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
        color_discrete_sequence=px.colors.qualitative.Set2
    )
    fig2.update_traces(
        textinfo='percent+label',
        textfont_size=14,
        pull=[0.1] * len(type_counts),  # –û—Ç—Å—Ç—É–ø —Å–µ–∫—Ç–æ—Ä–æ–≤
        marker=dict(line=dict(color='#FFFFFF', width=2))  # –ë–µ–ª—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
    )
    fig2.update_layout(
        height=500,
        margin=dict(t=50, b=50, l=50, r=50),
        showlegend=True
    )
    st.plotly_chart(fig2, width='stretch')
else:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.")

# –¢–∞–±–ª–∏—Ü–∞
st.markdown("---")
st.subheader("üìã –î–∞–Ω–Ω—ã–µ")
st.dataframe(
    filtered_df[['district', 'property_type', 'avg_price', 'total_ads', 'avg_price_per_sqm']],
    width='stretch',
    column_config={
        'district': '–†–∞–π–æ–Ω',
        'property_type': '–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
        'avg_price': st.column_config.NumberColumn('–¶–µ–Ω–∞ (‚Ç¨)', format='%.0f'),
        'total_ads': '–û–±—ä—è–≤–ª–µ–Ω–∏–π',
        'avg_price_per_sqm': st.column_config.NumberColumn('–¶–µ–Ω–∞ –∑–∞ –º¬≤ (‚Ç¨)', format='%.0f')
    }
)

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
time.sleep(15)
st.rerun()